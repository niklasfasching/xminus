[
  {
    "id": "x-properties",
    "tokens": [
      [
        "child",
        "\n      values\n      "
      ],
      [
        "open",
        "div"
      ],
      [
        "key",
        "key1"
      ],
      [
        "value",
        "value"
      ],
      [
        "key",
        "with"
      ],
      [
        "value",
        "true"
      ],
      [
        "key",
        "spaces"
      ],
      [
        "value",
        "true"
      ],
      [
        "key",
        "key2"
      ],
      [
        "value",
        "value with spaces"
      ],
      [
        "key",
        "key3"
      ],
      [
        "value",
        "value with spaces"
      ],
      [
        "close",
        "/"
      ],
      [
        "child",
        "\n\n      keys\n      "
      ],
      [
        "open",
        "div"
      ],
      [
        "key",
        "key-1"
      ],
      [
        "value",
        "value"
      ],
      [
        "key",
        "key-2"
      ],
      [
        "value",
        "true"
      ],
      [
        "key",
        "key-3"
      ],
      [
        "value",
        "true"
      ],
      [
        "key",
        "value"
      ],
      [
        "value",
        "true"
      ],
      [
        "close",
        "/"
      ]
    ],
    "vnodes": [
      [
        "\"\n      values\n      \"",
        "\n      values\n      ",
        false
      ],
      {
        "tag": "div",
        "properties": {
          "key1": "value",
          "with": "true",
          "spaces": "true",
          "key2": "value with spaces",
          "key3": "value with spaces"
        },
        "children": []
      },
      [
        "\"\n\n      keys\n      \"",
        "\n\n      keys\n      ",
        false
      ],
      {
        "tag": "div",
        "properties": {
          "key-1": "value",
          "key-2": "true",
          "key-3": "true",
          "value": "true"
        },
        "children": []
      }
    ]
  },
  {
    "id": "x-closure",
    "html": [
      "<div><div></div></div>"
    ],
    "create": [
      "let _0_node = _node.firstChild;",
      "let _1_node = _0_node.firstChild;",
      "let _2_template = _1_node, _2_parent = _1_node.parentNode;",
      "               _2_parent.removeChild(_1_node);",
      "               function _2_create($, ..._args) {",
      "                 let _1_node = _2_template.cloneNode(true);",
      "                 $ = Object.assign(Object.create($), {\"x\": _args[0]});",
      "                 _1_node.addEventListener(\"click\", (event) => {",
      "                 console.log($.x);",
      "                 $update();",
      "               });",
      "",
      "                 return [[_1_node], (..._args) => {",
      "                   $[\"x\"] = _args[0];",
      "                   ",
      "                 }];",
      "               };",
      "let _2_reference = _2_parent.appendChild(document.createComment(\"for\")),",
      "                   _2_nodeGroups = [];",
      "               xm.updateFor(_2_reference, _2_nodeGroups, [1, 2, 3], _2_create, $);",
      ""
    ],
    "update": [
      "xm.updateFor(_2_reference, _2_nodeGroups, [1, 2, 3], _2_create, $);",
      ""
    ]
  },
  {
    "id": "x-parent-component",
    "html": [
      "<div>",
      "        Here we embed another component. The content of the component tag is made available inside that component as children.",
      "        <template>slot value</template></div>"
    ],
    "create": [
      "let _3_node = _node.firstChild;",
      "let _4_node = _3_node.firstChild;",
      "let _5_node = _4_node.nextSibling;",
      "let _6_template = _5_node, _6_parent = _5_node.parentNode;",
      "               _6_parent.removeChild(_5_node);",
      "               function _6_create($, ..._args) {",
      "                 let _5_node = _6_template.cloneNode(true);",
      "                 ",
      "                 ",
      "                 return [[..._5_node.content.childNodes], (..._args) => {",
      "                   ",
      "                   ",
      "                 }];",
      "               };",
      "const [_6_nodes, _6_update] = xm.components[\"x-child-component\"]($, { }, _6_create);",
      "                 for (let node of _6_nodes) _6_parent.appendChild(node);",
      ""
    ],
    "update": [
      "_6_update($, { });",
      ""
    ]
  },
  {
    "id": "x-child-component",
    "html": [
      "<div>",
      "        Conent of tag at call site: <!---->",
      "      </div>"
    ],
    "create": [
      "let _7_node = _node.firstChild;",
      "let _8_node = _7_node.firstChild;",
      "const _9_nodeGroups = [(children)].map(v => xm.createNodeGroup(v));",
      "                 [_8_node.nextSibling].forEach((placeholder, i) => {",
      "                    for (let node of _9_nodeGroups[i]) _7_node.insertBefore(node, placeholder);",
      "                    _7_node.removeChild(placeholder);",
      "                 });",
      ""
    ],
    "update": [
      "xm.updateNodeGroups(_7_node.firstChild, _9_nodeGroups, [(children)], xm.createChild);",
      ""
    ]
  }
]
