[
  {
    "id": "x-properties",
    "tokens": [
      [
        "child",
        "\n      values\n      "
      ],
      [
        "open",
        "div"
      ],
      [
        "key",
        "key1"
      ],
      [
        "value",
        "value"
      ],
      [
        "key",
        "with"
      ],
      [
        "value",
        "true"
      ],
      [
        "key",
        "spaces"
      ],
      [
        "value",
        "true"
      ],
      [
        "key",
        "key2"
      ],
      [
        "value",
        "value with spaces"
      ],
      [
        "key",
        "key3"
      ],
      [
        "value",
        "value with spaces"
      ],
      [
        "close",
        "/"
      ],
      [
        "child",
        "\n\n      keys\n      "
      ],
      [
        "open",
        "div"
      ],
      [
        "key",
        "key-1"
      ],
      [
        "value",
        "value"
      ],
      [
        "key",
        "key-2"
      ],
      [
        "value",
        "true"
      ],
      [
        "key",
        "key-3"
      ],
      [
        "value",
        "true"
      ],
      [
        "key",
        "value"
      ],
      [
        "value",
        "true"
      ],
      [
        "close",
        "/"
      ]
    ],
    "vnodes": [
      "\n      values\n      ",
      {
        "tag": "div",
        "properties": {
          "key1": "value",
          "with": "true",
          "spaces": "true",
          "key2": "value with spaces",
          "key3": "value with spaces"
        },
        "children": []
      },
      "\n\n      keys\n      ",
      {
        "tag": "div",
        "properties": {
          "key-1": "value",
          "key-2": "true",
          "key-3": "true",
          "value": "true"
        },
        "children": []
      }
    ]
  },
  {
    "id": "x-closure",
    "code": [
      "(function() {",
      "            //# sourceURL=closureComponent.generated.js",
      "            const _hooks = typeof closure === \"undefined\" ? {} : closure;",
      "            const _template = document.createElement(\"template\");",
      "            _template.innerHTML = `<div><div></div></div>`;",
      "            return function _closureComponent($, properties, _createChildren) {",
      "              const _node = _template.content.cloneNode(true);",
      "              const $update = () => _node._update($);",
      "              $ = Object.create($);",
      "              $ = Object.assign($, _hooks.create?.($, properties, $update));",
      "              const _childrenTemplate = _createChildren?.($);",
      "              const children = _childrenTemplate?.content;",
      "              let _0_node = _node.firstChild;",
      "let _1_node = _0_node.firstChild;",
      "let _2_template = _1_node, _2_templateParent = _1_node.parentNode;",
      "               _2_templateParent.removeChild(_1_node);",
      "               function _2_create($, ..._args) {",
      "                 let _1_node = _2_template.cloneNode(true);",
      "                 $ = Object.assign(Object.create($), {\"x\": _args[0]});",
      "                 _1_node.addEventListener(\"click\", (event) => {",
      "                 console.log($.x);",
      "                 $update();",
      "               });",
      "",
      "                 _1_node._updateClosure = function(..._args) {",
      "                   $[\"x\"] = _args[0];",
      "                   ",
      "                 };",
      "                 return _1_node;",
      "               };",
      "for (let value of [1, 2, 3]) _2_templateParent.appendChild(_2_create($, value));",
      "",
      "              _node._update = ($, _properties) => {",
      "                if (_properties) properties = _properties;",
      "                _hooks.update?.($, properties, $update);",
      "                _childrenTemplate?._updateClosure();",
      "                xm.updateFor(_2_templateParent, $, [1, 2, 3], _2_create);",
      "",
      "              }",
      "              return _node;",
      "            };",
      "          })()",
      ""
    ]
  }
]
