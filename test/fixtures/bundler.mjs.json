{
  "bundler: rebaseModuleImports: should rewrite relative imports (0)": {
    "module": [
      "import * from '/rebase/module.js';",
      "import * from '/rebase/dir/module.js';",
      "import * from '/rebase/base/module.js';",
      "import * from '/rebase/base/dir/module.js';",
      "import {foo, bar} from '/rebase/module.js';",
      "import * as module from '/rebase/module.js';",
      "import '/rebase/module.js';",
      ""
    ]
  },
  "bundler: rebaseModuleImports: should not modify absolute imports (0)": {
    "module": [
      "import * from 'http://foo.bar/module.js';",
      "import {foo, bar} from 'http://foo.bar/module.js';",
      "import * as module from 'http://foo.bar/module.js';",
      "import 'http://foo.bar/module.js';",
      ""
    ]
  },
  "bundler: bundle: should bundle into an html file (0)": {
    "html": [
      "<!DOCTYPE html>",
      "<html><head>",
      "<script type=\"module\">",
      "import {mount} from '/src/runtime.mjs';",
      "mount(document.body, \"x-main\", {foo: \"bar\"});",
      "</script>",
      "<script type=\"module\">",
      "xm.register(\"x-main\", `",
      "<p><!----></p>",
      "<div><!----></div>",
      "`, function() {",
      "const $ = this;",
      "let _children_0_node = this.firstChild;",
      "let _children_1_node = _children_0_node.nextSibling;",
      "let _children_2_node = _children_1_node.firstChild;",
      "let _children_4_node = _children_1_node;",
      "const _children_3_nodes = [_children_2_node], _children_3_values = [];",
      "xm.updateChildNodes(_children_4_node, null, _children_3_nodes, _children_3_values, [($.foo)], $, xm.createChildNode);",
      "let _children_5_node = _children_1_node.nextSibling;",
      "let _children_6_node = _children_5_node.nextSibling;",
      "let _children_7_node = _children_6_node.firstChild;",
      "let _children_9_node = _children_6_node;",
      "const _children_8_nodes = [_children_7_node], _children_8_values = [];",
      "xm.updateChildNodes(_children_9_node, null, _children_8_nodes, _children_8_values, [($.app === $)], $, xm.createChildNode);",
      "let _children_10_node = _children_6_node.nextSibling;",
      "return () => {",
      "xm.updateChildNodes(_children_4_node, null, _children_3_nodes, _children_3_values, [($.foo)], $, xm.createChildNode);",
      "xm.updateChildNodes(_children_9_node, null, _children_8_nodes, _children_8_values, [($.app === $)], $, xm.createChildNode);",
      "};",
      "}, [\"foo\",]);",
      "xm.register(\"x-component\", `",
      "a component",
      "`, function() {",
      "const $ = this;",
      "let _children_11_node = this.firstChild;",
      "return () => {",
      "};",
      "}, []);",
      "</script>",
      "<link href=\"/src/base.css\" rel=\"stylesheet\">",
      "<meta charset=\"utf-8\">",
      "</head>",
      "</html>"
    ]
  },
  "bundler: bundle: should bundle into a data url (0)": {
    "code": [
      "data:text/javascript,import \"data:text/javascript,//# sourceURL=xmComponents.js",
      "xm.register(\"x-main\", `",
      "<p><!----></p>",
      "<div><!----></div>",
      "`, function() {",
      "const $ = this;",
      "let _children_0_node = this.firstChild;",
      "let _children_1_node = _children_0_node.nextSibling;",
      "let _children_2_node = _children_1_node.firstChild;",
      "let _children_4_node = _children_1_node;",
      "const _children_3_nodes = [_children_2_node], _children_3_values = [];",
      "xm.updateChildNodes(_children_4_node, null, _children_3_nodes, _children_3_values, [($.foo)], $, xm.createChildNode);",
      "let _children_5_node = _children_1_node.nextSibling;",
      "let _children_6_node = _children_5_node.nextSibling;",
      "let _children_7_node = _children_6_node.firstChild;",
      "let _children_9_node = _children_6_node;",
      "const _children_8_nodes = [_children_7_node], _children_8_values = [];",
      "xm.updateChildNodes(_children_9_node, null, _children_8_nodes, _children_8_values, [($.app === $)], $, xm.createChildNode);",
      "let _children_10_node = _children_6_node.nextSibling;",
      "return () => {",
      "xm.updateChildNodes(_children_4_node, null, _children_3_nodes, _children_3_values, [($.foo)], $, xm.createChildNode);",
      "xm.updateChildNodes(_children_9_node, null, _children_8_nodes, _children_8_values, [($.app === $)], $, xm.createChildNode);",
      "};",
      "}, [\"foo\",]);",
      "xm.register(\"x-component\", `",
      "a component",
      "`, function() {",
      "const $ = this;",
      "let _children_11_node = this.firstChild;",
      "return () => {",
      "};",
      "}, []);",
      "\";"
    ]
  }
}
