{
  "compiler: generateVnode: should not generate update code for static html": {
    "html": "<div>hello <b>world</b></div>",
    "create": [
      "let _0_node = root.firstChild;",
      "let _1_node = _0_node.nextSibling;",
      "let _2_node = _1_node.firstChild;",
      ""
    ],
    "update": ""
  },
  "compiler: generateVnode: should generate create and update code for dynamic properties": {
    "html": "<div>hello world</div>",
    "create": [
      "let _0_node = root;",
      "let _1_key = (dynamic key); xm.setProperty(_0_node, _1_key, \"value\");",
      "xm.setProperty(_0_node, \"key\", (dynamic value));",
      "let _2_node = root.firstChild;",
      ""
    ],
    "update": [
      "_1_key = xm.setDynamicKeyProperty(_0_node, _1_key, (dynamic key), \"value\");",
      "xm.setProperty(_0_node, \"key\", (dynamic value));",
      ""
    ]
  },
  "compiler: generateVnode: should generate create and update code for dynamic children": {
    "html": "<div>hello <!----></div>",
    "create": [
      "let _0_node = root.firstChild;",
      "let _2_node = root;",
      "const _1_nodes = [_0_node.nextSibling], _1_values = [];",
      "xm.updateNodes(_2_node, null, _1_nodes, _1_values, [(dynamic child)], $, xm.createChildNode);",
      ""
    ],
    "update": [
      "xm.updateNodes(_2_node, null, _1_nodes, _1_values, [(dynamic child)], $, xm.createChildNode);",
      ""
    ]
  },
  "compiler: generateVnode: should generate void tags without children": {
    "html": "<div><input><!----></div>",
    "create": [
      "let _0_node = root.firstChild;",
      "let _1_node = _0_node.nextSibling;",
      "let _3_node = root;",
      "const _2_nodes = [_1_node], _2_values = [];",
      "xm.updateNodes(_3_node, null, _2_nodes, _2_values, [(not a child of input)], $, xm.createChildNode);",
      ""
    ],
    "update": [
      "xm.updateNodes(_3_node, null, _2_nodes, _2_values, [(not a child of input)], $, xm.createChildNode);",
      ""
    ]
  },
  "compiler: generateVnode: should generate component tags": {
    "html": "<template>foo bar <!----></template>",
    "create": [
      "let _0_node = root, _0_parent = root.parentNode, _0_anchor = document.createComment(\"closure anchor\");",
      "_0_node.replaceWith(_0_anchor);",
      "root = _0_anchor;",
      "function _0_create($, ..._args) {",
      "let root = _0_node.content.cloneNode(true);",
      "let _1_node = root.firstChild;",
      "let _3_node = root;",
      "const _2_nodes = [_1_node.nextSibling], _2_values = [];",
      "xm.updateNodes(_3_node, null, _2_nodes, _2_values, [(baz)], $, xm.createChildNode);",
      "return [new xm.Fragment(root.childNodes), (..._args) => {",
      "xm.updateNodes(_3_node, null, _2_nodes, _2_values, [(baz)], $, xm.createChildNode);",
      "}];",
      "}",
      "let _0_tag = \"x-component\";",
      "root = xm.createComponent(root, _0_tag, $, { [(dynamic key)]: \"value\", [\"key\"]: (dynamic value), }, _0_create, $internal);",
      ""
    ],
    "update": [
      "root.updateComponent({ [(dynamic key)]: \"value\", [\"key\"]: (dynamic value), });",
      ""
    ]
  },
  "compiler: generateVnode: should generate nested dynamic children": {
    "html": "<div><div><!----></div><!----></div>",
    "create": [
      "let _0_node = root.firstChild;",
      "let _1_node = _0_node.firstChild;",
      "let _3_node = _0_node;",
      "const _2_nodes = [_1_node], _2_values = [];",
      "xm.updateNodes(_3_node, null, _2_nodes, _2_values, [(foo bar)], $, xm.createChildNode);",
      "let _4_node = _0_node.nextSibling;",
      "let _6_node = root;",
      "const _5_nodes = [_4_node], _5_values = [];",
      "xm.updateNodes(_6_node, null, _5_nodes, _5_values, [(baz)], $, xm.createChildNode);",
      ""
    ],
    "update": [
      "xm.updateNodes(_3_node, null, _2_nodes, _2_values, [(foo bar)], $, xm.createChildNode);",
      "xm.updateNodes(_6_node, null, _5_nodes, _5_values, [(baz)], $, xm.createChildNode);",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .on macro": {
    "html": "<div></div>",
    "create": [
      "let _0_node = root;",
      "xm.setProperty(_0_node, \"key\", (dynamic value));",
      "root.addEventListener(\"click\", function($event) {",
      "console.log('magic');",
      "$update();",
      "});",
      ""
    ],
    "update": [
      "xm.setProperty(_0_node, \"key\", (dynamic value));",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .on:create macro": {
    "html": "<div></div>",
    "create": [
      "let _0_node = root;",
      "function _0_node_fn() { console.log('magic') }",
      "setTimeout(() => _0_node_fn.call(_0_node));",
      ""
    ],
    "update": ""
  },
  "compiler: generateVnode: macro: should generate .on:update macro": {
    "html": "<div></div>",
    "create": [
      "let _0_node = root;",
      "function _0_node_fn() { console.log('magic') }",
      ""
    ],
    "update": [
      "setTimeout(() => _0_node_fn.call(_0_node));",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .on macro with no(update) modifier": {
    "html": "<div></div>",
    "create": [
      "let _0_node = root;",
      "function _0_node_fn() { console.log('magic') }",
      ""
    ],
    "update": [
      "setTimeout(() => _0_node_fn.call(_0_node));",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .bind: macro": {
    "html": "<div></div>",
    "create": [
      "let _0_node = root;",
      "if ($.value !== undefined) _0_node[\"value\"] = $.value;",
      "_0_node.addEventListener(\"change\", () => $.value = _0_node[\"value\"]);",
      ""
    ],
    "update": [
      "if (document.activeElement !== _0_node) _0_node[\"value\"] = $.value;",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .bind: macro for input elements": {
    "html": "<div><input><textarea></textarea><select><option>foo</option></select></div>",
    "create": [
      "let _0_node = root.firstChild;",
      "let _1_node = _0_node;",
      "if ($.value !== undefined) _1_node[\"value\"] = $.value;",
      "_1_node.addEventListener(\"keyup\", () => $.value = _1_node[\"value\"]);",
      "let _2_node = _0_node.nextSibling;",
      "let _3_node = _2_node;",
      "if ($.value !== undefined) _3_node[\"value\"] = $.value;",
      "_3_node.addEventListener(\"keyup\", () => $.value = _3_node[\"value\"]);",
      "let _4_node = _2_node.nextSibling;",
      "let _5_node = _4_node.firstChild;",
      "let _6_node = _5_node.firstChild;",
      "let _7_node = _4_node;",
      "if ($.value !== undefined) _7_node[\"value\"] = $.value;",
      "_7_node.addEventListener(\"change\", () => $.value = _7_node[\"value\"]);",
      ""
    ],
    "update": [
      "if (document.activeElement !== _1_node) _1_node[\"value\"] = $.value;",
      "if (document.activeElement !== _3_node) _3_node[\"value\"] = $.value;",
      "if (document.activeElement !== _7_node) _7_node[\"value\"] = $.value;",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .for macro": {
    "html": "<div></div>",
    "create": [
      "let _0_node = root, _0_parent = root.parentNode, _0_anchor = document.createComment(\"closure anchor\");",
      "_0_node.replaceWith(_0_anchor);",
      "root = _0_anchor;",
      "function _0_create($, ..._args) {",
      "let root = _0_node.cloneNode(true);",
      "$ = Object.assign(Object.create($), {\"item\": _args[0]});",
      "let _1_node = root;",
      "xm.setProperty(_1_node, \"key\", (dynamic value));",
      "return [root, (..._args) => {",
      "$[\"item\"] = _args[0];",
      "xm.setProperty(_1_node, \"key\", (dynamic value));",
      "}];",
      "}",
      "const _0_values = [], _0_nodes = [], _0_createFor = ($, value) => {",
      "const [node, update] = _0_create($, value);",
      "node.update = (value) => {",
      "update(value);",
      "return node;",
      "};",
      "return node;",
      "};",
      "xm.updateNodes(_0_parent, _0_anchor, _0_nodes, _0_values, $.items, $, _0_createFor);",
      ""
    ],
    "update": [
      "xm.updateNodes(_0_parent, _0_anchor, _0_nodes, _0_values, $.items, $, _0_createFor);",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .if macro": {
    "html": "<div></div>",
    "create": [
      "let _0_node = root;",
      "xm.setProperty(_0_node, \"key\", (dynamic value));",
      "const _1_node = root, _1_placeholder = document.createComment(\"if\");",
      "if (!$.condition) root = xm.replaceWith(_1_node, _1_placeholder);",
      ""
    ],
    "update": [
      "xm.setProperty(_0_node, \"key\", (dynamic value));",
      "xm.nodeIf(($.condition), _1_node, _1_placeholder);",
      ""
    ]
  },
  "compiler: compile: should generate a component (smoke test)": {
    "result": [
      "xm.components[\"x-foo-component\"] = (function() {",
      "const _hooks = xm.hooks[\"x-foo-component\"] || {};",
      "const _template = document.createElement(\"template\");",
      "_template.innerHTML = `<div></div>`;",
      "return function($, properties, _createChildren, $internal) {",
      "let {$path, $query, $update} = $internal;",
      "const _node = _template.content.cloneNode(true);",
      "$ = Object.create($);",
      "$ = Object.assign($, _hooks.create?.($, properties, $internal));",
      "const [$children, _childrenUpdate] = _createChildren?.($) || [];",
      "let _0_node = _node.firstChild;",
      "const _update = (_properties) => {",
      "let {$path, $query, $update} = $internal;",
      "if (_properties) properties = _properties;",
      "_hooks.update?.($, properties, $internal);",
      "_childrenUpdate?.();",
      "};",
      "return [new xm.Fragment(_node.childNodes), _update];",
      "};",
      "})();",
      ""
    ],
    "html": "",
    "create": "",
    "update": ""
  }
}
