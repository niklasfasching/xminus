{
  "compiler: generateVnode: should not generate update code for static html": {
    "html": "<div>hello <b>world</b></div>",
    "create": [
      "let _children_0_node = root.firstChild;",
      "let _children_1_node = _children_0_node.nextSibling;",
      "let _children_2_node = _children_1_node.firstChild;",
      ""
    ],
    "update": ""
  },
  "compiler: generateVnode: should generate create and update code for dynamic properties": {
    "html": "<div>hello world</div>",
    "create": [
      "let _properties_0_node = root;",
      "let _properties_1_key = (dynamic key); xm.setProperty(_properties_0_node, _properties_1_key, \"value\");",
      "xm.setProperty(_properties_0_node, \"key\", (dynamic value));",
      "let _children_2_node = root.firstChild;",
      ""
    ],
    "update": [
      "_properties_1_key = xm.setDynamicKeyProperty(_properties_0_node, _properties_1_key, (dynamic key), \"value\");",
      "xm.setProperty(_properties_0_node, \"key\", (dynamic value));",
      ""
    ]
  },
  "compiler: generateVnode: should generate create and update code for dynamic children": {
    "html": "<div>hello <!----></div>",
    "create": [
      "let _children_0_node = root.firstChild;",
      "let _children_2_node = root;",
      "const _children_1_nodes = [_children_0_node.nextSibling], _children_1_values = [];",
      "xm.updateNodes(_children_2_node, null, _children_1_nodes, _children_1_values, [(dynamic child)], $, xm.createChildNode);",
      ""
    ],
    "update": [
      "xm.updateNodes(_children_2_node, null, _children_1_nodes, _children_1_values, [(dynamic child)], $, xm.createChildNode);",
      ""
    ]
  },
  "compiler: generateVnode: should generate void tags without children": {
    "html": "<div><input><!----></div>",
    "create": [
      "let _children_0_node = root.firstChild;",
      "let _children_1_node = _children_0_node.nextSibling;",
      "let _children_3_node = root;",
      "const _children_2_nodes = [_children_1_node], _children_2_values = [];",
      "xm.updateNodes(_children_3_node, null, _children_2_nodes, _children_2_values, [(not a child of input)], $, xm.createChildNode);",
      ""
    ],
    "update": [
      "xm.updateNodes(_children_3_node, null, _children_2_nodes, _children_2_values, [(not a child of input)], $, xm.createChildNode);",
      ""
    ]
  },
  "compiler: generateVnode: should generate component tags": {
    "html": "<x-component>foo bar <!----></x-component>",
    "create": [
      "let _children_0_node = root.firstChild;",
      "let _children_2_node = root;",
      "const _children_1_nodes = [_children_0_node.nextSibling], _children_1_values = [];",
      "xm.updateNodes(_children_2_node, null, _children_1_nodes, _children_1_values, [(baz)], $, xm.createChildNode);",
      "root._props = { [(dynamic key)]: \"value\", [\"key\"]: (dynamic value), }, root._$ = Object.create($);",
      ""
    ],
    "update": [
      "xm.updateNodes(_children_2_node, null, _children_1_nodes, _children_1_values, [(baz)], $, xm.createChildNode);",
      "root._props = { [(dynamic key)]: \"value\", [\"key\"]: (dynamic value), };",
      "root.updateCallback();",
      ""
    ]
  },
  "compiler: generateVnode: should generate nested dynamic children": {
    "html": "<div><div><!----></div><!----></div>",
    "create": [
      "let _children_0_node = root.firstChild;",
      "let _children_1_node = _children_0_node.firstChild;",
      "let _children_3_node = _children_0_node;",
      "const _children_2_nodes = [_children_1_node], _children_2_values = [];",
      "xm.updateNodes(_children_3_node, null, _children_2_nodes, _children_2_values, [(foo bar)], $, xm.createChildNode);",
      "let _children_4_node = _children_0_node.nextSibling;",
      "let _children_6_node = root;",
      "const _children_5_nodes = [_children_4_node], _children_5_values = [];",
      "xm.updateNodes(_children_6_node, null, _children_5_nodes, _children_5_values, [(baz)], $, xm.createChildNode);",
      ""
    ],
    "update": [
      "xm.updateNodes(_children_3_node, null, _children_2_nodes, _children_2_values, [(foo bar)], $, xm.createChildNode);",
      "xm.updateNodes(_children_6_node, null, _children_5_nodes, _children_5_values, [(baz)], $, xm.createChildNode);",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .on macro": {
    "html": "<div></div>",
    "create": [
      "let _properties_0_node = root;",
      "xm.setProperty(_properties_0_node, \"key\", (dynamic value));",
      "root.addEventListener(\"click\", function($event) {",
      "console.log('magic');",
      "$.$update();",
      "});",
      ""
    ],
    "update": [
      "xm.setProperty(_properties_0_node, \"key\", (dynamic value));",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .on:create macro": {
    "html": "<div></div>",
    "create": [
      "let _on_0_node = root;",
      "function _on_0_node_fn() { console.log('magic') }",
      "setTimeout(() => _on_0_node_fn.call(_on_0_node));",
      ""
    ],
    "update": ""
  },
  "compiler: generateVnode: macro: should generate .on:update macro": {
    "html": "<div></div>",
    "create": [
      "let _on_0_node = root;",
      "function _on_0_node_fn() { console.log('magic') }",
      ""
    ],
    "update": [
      "setTimeout(() => _on_0_node_fn.call(_on_0_node));",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .on macro with no(update) modifier": {
    "html": "<div></div>",
    "create": [
      "let _on_0_node = root;",
      "function _on_0_node_fn() { console.log('magic') }",
      ""
    ],
    "update": [
      "setTimeout(() => _on_0_node_fn.call(_on_0_node));",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .bind: macro": {
    "html": "<div></div>",
    "create": [
      "let _bind_0_node = root;",
      "if ($.value !== undefined) _bind_0_node[\"value\"] = $.value;",
      "_bind_0_node.addEventListener(\"change\", () => $.value = _bind_0_node[\"value\"]);",
      ""
    ],
    "update": [
      "if (document.activeElement !== _bind_0_node) _bind_0_node[\"value\"] = $.value;",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .bind: macro for input elements": {
    "html": [
      "<div>",
      "<input>",
      "<textarea></textarea>",
      "<select><option>foo</option></select>",
      "</div>"
    ],
    "create": [
      "let _children_0_node = root.firstChild;",
      "let _children_1_node = _children_0_node.nextSibling;",
      "let _bind_2_node = _children_1_node;",
      "if ($.value !== undefined) _bind_2_node[\"value\"] = $.value;",
      "_bind_2_node.addEventListener(\"keyup\", () => $.value = _bind_2_node[\"value\"]);",
      "let _children_3_node = _children_1_node.nextSibling;",
      "let _children_4_node = _children_3_node.nextSibling;",
      "let _bind_5_node = _children_4_node;",
      "if ($.value !== undefined) _bind_5_node[\"value\"] = $.value;",
      "_bind_5_node.addEventListener(\"keyup\", () => $.value = _bind_5_node[\"value\"]);",
      "let _children_6_node = _children_4_node.nextSibling;",
      "let _children_7_node = _children_6_node.nextSibling;",
      "let _children_8_node = _children_7_node.firstChild;",
      "let _children_9_node = _children_8_node.firstChild;",
      "let _bind_10_node = _children_7_node;",
      "if ($.value !== undefined) _bind_10_node[\"value\"] = $.value;",
      "_bind_10_node.addEventListener(\"change\", () => $.value = _bind_10_node[\"value\"]);",
      "let _children_11_node = _children_7_node.nextSibling;",
      ""
    ],
    "update": [
      "if (document.activeElement !== _bind_2_node) _bind_2_node[\"value\"] = $.value;",
      "if (document.activeElement !== _bind_5_node) _bind_5_node[\"value\"] = $.value;",
      "if (document.activeElement !== _bind_10_node) _bind_10_node[\"value\"] = $.value;",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .for macro": {
    "html": "<!---->",
    "create": [
      "let _for_0_anchor = root, _for_0_node = xm.fragment(`<div></div>`).firstChild;",
      "function _for_0_create($, ..._args) {",
      "let root = _for_0_node.cloneNode(true);",
      "$ = Object.assign(Object.create($), {\"item\": _args[0]});",
      "let _properties_1_node = root;",
      "xm.setProperty(_properties_1_node, \"key\", (dynamic value));",
      "return [root, (..._args) => {",
      "$[\"item\"] = _args[0];",
      "xm.setProperty(_properties_1_node, \"key\", (dynamic value));",
      "}];",
      "}",
      "const _for_0_values = [], _for_0_nodes = [], _for_0_createFor = ($, value) => {",
      "const [node, update] = _for_0_create($, value);",
      "node.update = (value) => {",
      "update(value);",
      "return node;",
      "};",
      "return node;",
      "};",
      "xm.updateNodes(_for_0_anchor.parentNode, _for_0_anchor, _for_0_nodes, _for_0_values, $.items, $, _for_0_createFor);",
      ""
    ],
    "update": [
      "xm.updateNodes(_for_0_anchor.parentNode, _for_0_anchor, _for_0_nodes, _for_0_values, $.items, $, _for_0_createFor);",
      ""
    ]
  },
  "compiler: generateVnode: macro: should generate .if macro": {
    "html": "<!---->",
    "create": [
      "let _if_0_anchor = root, _if_0_node = xm.fragment(`<div></div>`).firstChild;",
      "function _if_0_create($, ..._args) {",
      "let root = _if_0_node.cloneNode(true);",
      "let _properties_1_node = root;",
      "xm.setProperty(_properties_1_node, \"key\", (dynamic value));",
      "return [root, (..._args) => {",
      "xm.setProperty(_properties_1_node, \"key\", (dynamic value));",
      "}];",
      "}",
      "let [_if_0_connected, _if_0_update] = xm.nodeIf(($.condition), _if_0_anchor, _if_0_anchor, $, _if_0_create);",
      "root = _if_0_connected;",
      ""
    ],
    "update": [
      "[_if_0_connected, _if_0_update] = xm.nodeIf(($.condition), _if_0_connected, _if_0_anchor, $, _if_0_create, _if_0_update);",
      ""
    ]
  },
  "compiler: compile: should generate a component (smoke test)": {
    "result": [
      "xm.register(\"x-foo-component\", `<div></div>`, function(_node, slot, $, props) {",
      "let _children_0_node = _node.firstChild;",
      "return (props) => {",
      "};",
      "});",
      ""
    ],
    "html": "",
    "create": "",
    "update": ""
  }
}
